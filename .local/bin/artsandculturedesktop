#!/usr/bin/python3

from __future__ import annotations

import json
import random
import requests
import subprocess
import xdg.BaseDirectory

from io import BytesIO
from PIL import Image
from pathlib import Path

REQUEST_HEADERS = {"User-Agent": "Arts and Culture Desktop Fetcher/0.2"}
IMAGE_DATA_URL = "https://www.gstatic.com/culturalinstitute/tabext/imax.json"


class ImageData:
    def __init__(self, json) -> None:
        self.json = json

    def fetch(self: ImageData) -> Image.Image:
        url = self.json["image"] + "=s1200-rw"
        response = requests.get(url, stream=True, headers=REQUEST_HEADERS)
        response.raise_for_status()
        return Image.open(BytesIO(response.content))

    def save_image(self: ImageData, filename: Path) -> None:
        self.fetch().save(filename)

    def save_json(self: ImageData, filename: Path) -> None:
        with open(filename, "w") as f:
            json.dump(self.json, f)


def screen_resolutions() -> list[tuple[int, int]]:
    xrandr_lines = subprocess.check_output(
        ["xrandr", "-q"], universal_newlines=True
    ).split("\n")
    lines = [line.strip().split()[0] for line in xrandr_lines if "*" in line]
    return [(int(x), int(y)) for (x, _, y) in (line.partition("x") for line in lines)]


def get_image_data() -> list[ImageData]:
    response = requests.get(IMAGE_DATA_URL, headers=REQUEST_HEADERS)
    response.raise_for_status()
    return [ImageData(entry) for entry in response.json()]


def get_data_directory() -> Path:
    directory = Path(xdg.BaseDirectory.xdg_data_home) / Path(__file__).name
    directory.mkdir(parents=True, exist_ok=True)
    return directory


def set_desktop_images(filenames: list[Path]) -> None:
    subprocess.call(sum((["--bg-fill", filename] for filename in filenames), ["feh"]))


if __name__ == "__main__":
    num_images = len(screen_resolutions())
    image_data = random.sample(get_image_data(), num_images)
    data_dir = get_data_directory()
    filenames = [data_dir / f"image-{i}.jpg" for i in range(num_images)]
    for image, filename in zip(image_data, filenames):
        image.save_image(filename)
        image.save_json(filename.with_suffix(".json"))
    set_desktop_images(filenames)
